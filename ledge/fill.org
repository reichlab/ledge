#+TITLE: Fill

#+PROPERTY: header-args :eval never :tangle ./fill.py

#+BEGIN_SRC python :exports none
  """
  This file is generated using an accompanying org file.
  Do not edit manually.
  """
#+END_SRC

#+BEGIN_SRC python :exports none
  import xarray as xr
  import numpy as np
  from typing import List, Union
  from functools import partial, wraps
  from ledge.datatypes import Truth, Loss
#+END_SRC

#+BEGIN_SRC python :exports none
  Series = Union[Truth, Loss]
#+END_SRC

This contains functions to fill in values for missing lags. Assuming that lagged
values are provided in timely manner (/i/ step ahead we get lag i value), we can
find an estimate of what lag /i/ value might look like given all the past
dependences of lag values.

As an example, if we notice that all lag 1 values (till now) are about 0.1 ahead
of lag 0 values, we might just add 0.1 to the lag 0 value and hope that we do
better than just using the raw lag 0 value.

Since this type of imputation relies on using the past data, we need some form
of weighing to counter movements (if any) in the data. Depending on what they
are doing, a fill (imputation) function might invoke a /window function/ which
provides such weights for the past.

* Windows
A window is an array which defines how to weigh the past. We might want to just
use the past few values or give every time step equal weight. A /window function/
as used by the imputation functions is a function with single argument that
takes the size of window array to generate.

For creating a window function, there are the following in-built choices:

#+BEGIN_SRC python
  def window_linear(size, alpha=1):
      """
      Return arithmetically increasing weights.
      Value of alpha doesn't matter if using normalization.
      """

      return np.linspace(alpha, alpha * size, size)


  def window_geometric(size, gamma):
      """
      Geometrically increasing weights
      """

      return np.geomspace(gamma, gamma ** size, num=size)[::-1]


  def window_uniform(size):
      """
      Uniform weights
      """

      return np.ones(size)
#+END_SRC

Even though something like the geometric window assigns low weight to elements
far back, we might just want to set 0 weights for all the time steps beyond a
certain ~lookback~ value. The following decorator allows that:

#+BEGIN_SRC python
  def lookback(window_size):
      """
      Decorator for clipping the lookback size to a limit.
      """

      def lookback_dec(window_fn):
          @wraps(window_fn)
          def _wrapper(size, *args, **kwargs):
              if window_size is None:
                  return window_fn(size, *args, **kwargs)
              else:
                  if window_size < size:
                      pad_len = size - window_size
                      return np.pad(window_fn(window_size, *args, **kwargs), (pad_len, 0), "constant")
                  else:
                      return window_fn(size, **kwargs)
          return _wrapper
      return lookback_dec
#+END_SRC

Additionally, the ~normalize~ decorator normalizes the weights to sum to 1.

#+BEGIN_SRC python
  def normalize(window_fn):
      """
      Decorator for normalizing the window function output
      """

      @wraps(window_fn)
      def _wrapper(*args, **kwargs):
          weights = window_fn(*args, **kwargs)
          return weights / np.sum(weights)

      return _wrapper
#+END_SRC

As an example, if we have 10 time steps and we want to create a window function
which assigns equal weights to only the last three values, we can use the
following:

#+BEGIN_SRC python :tangle no
  normalize(lookback(3)(window_uniform))
#+END_SRC

* Fill functions

Right now we use filling techniques where we keep track of differences between
values of two lag series and try to figure out missing values in one of them
using a window function based weighing. For example, at time /t/, we have /t - 1/
differences between lag 0 and lag 1 values which can help us estimate the lag 1
value for time /1/ (note that /at the moment/, we have only lag 0 value for time /t/).

~diff_window~ is the main function which takes in a list of series (~Union[Truth,
Loss]~) and returns filled in lists. It does pairwise filling which can be both
incremental or based only on the first series.

#+BEGIN_SRC python
  def diff_window(series_list: List[Series], window_fn, inc=False) -> List[Series]:
      """
      Fill in the series using weighted mean of the diff between a `base` series.
      If incremental is true, the base series is the previous series. If false,
      the base is the first series.
      """

      if len(series_list) < 2:
          raise ValueError("At least 2 series needed")

      base_series = series_list[0]
      output = [base_series]

      for i in range(1, len(series_list)):
          if inc:
              base_series = output[i - 1]

          diffs = series_list[i] - base_series
          fallback = base_series + np.dot(diffs, window_fn(len(diffs)))

          output.append(series_list[i].combine_first(fallback))

      return output
#+END_SRC

We then have other helper functions using the default, normalized windows.

#+BEGIN_SRC python
  diff_mean = partial(diff_window, window_fn=normalize(window_uniform))
  diff_mean.__doc__ = "Weigh the past by taking mean of all"

  diff_linear = partial(diff_window, window_fn=normalize(window_linear))
  diff_linear.__doc__ = "Fill in values by weighing the past linearly"

  def diff_geometric(series_list: List[Series], gamma: float, inc=False) -> List[Series]:
      """
      Fill in values by weighing the past geometrically using gamma
      """

      window_fn = normalize(partial(window_geometric, gamma=gamma))
      return diff_window(series_list, window_fn=window_fn, inc=inc)
#+END_SRC

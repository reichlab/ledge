#+TITLE: Visualizations

#+PROPERTY: header-args :eval never :tangle ./viz.py

#+BEGIN_SRC python :exports none
  """
  This file is generated using an accompanying org file.
  Do not edit manually.
  """
#+END_SRC

This module contains some visualization functions for better understanding the
weight updates and losses.

#+BEGIN_SRC python :exports none
  import xarray as xr
  from typing import List, Callable
  from ledge.datatypes import Loss, Weight
  from ledge.utils import uniform_weights
  import matplotlib.pyplot as plt
#+END_SRC

* Losses

** Cumulative losses
Cumulative losses are one of the main metric considered while dynamic updating
weights. For example, the simplest follow the leader algorithm works directly
using the cumulative loss.

Plotting these can help in understanding where the switches happen in an ftl-ish
algorithm.

#+BEGIN_SRC python
  def c_profile(ax, losses: List[Loss],
                xlabel="Timepoints", ylabel="Loss",
                title="Cumulative loss profile"):
      """
      Plot cumulative profile for given losses
      """

      losses = sorted(losses, key=sum, reverse=True)
      c_losses = [l.cumsum() for l in losses]

      for cl, l in zip(c_losses, losses):
          ax.plot(l.timepoints, cl, label=l.attrs['model'])
          total = float(cl[-1])
          ax.annotate(f"{total:.4f}", xy=(l.timepoints[-1], total))

      ax.set_xlabel(xlabel)
      ax.set_ylabel(ylabel)
      ax.set_title(title)
      ax.legend()
#+END_SRC

** TODO Lag plots
The general purpose equivalent of mm plots.

* Weights

** TODO Weight update plots
The gh heatmap style plots from online-lag-ensemble.

** TODO Weight on loss
Visualizer to show how the weights /accumulate/ losses on the cumulative curves.
Notice that the losses accumulated are given by the rise of the cumulative
segemnt covered.
